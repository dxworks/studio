version: "3.8"

services:
  chronos2:
    image: {chronosDockerRegistry}/chronos:{chronosTag}
    restart: unless-stopped
    ports:
      - {chronosPort}:8081
    volumes:
      - ./data/chronos2:/root/chronos2
    networks:
      - {network}
    labels:
      - traefik.enable=true
      - traefik.http.routers.{projectID}-chronos2.entrypoints=web,web-secured
      - traefik.http.routers.{projectID}-chronos2.rule=Host(`chronos.{projectID}.{domain}`)
      - traefik.http.middlewares.chronospathstrip.stripprefix.prefixes=/chronos
      - traefik.http.middlewares.chronospathadd.addprefix.prefix=/chronos
      - traefik.http.routers.{projectID}-chronos2.middlewares=chronospathstrip@docker,chronospathadd@docker
      - traefik.http.routers.{projectID}-chronos2.service={projectID}-chronos2
      - traefik.http.services.{projectID}-chronos2.loadbalancer.server.port=8081
      - traefik.docker.network={network}
      - traefik.http.routers.{projectID}-chronos2.tls=true
      - traefik.http.routers.{projectID}-chronos2.tls.certresolver=default

  chronos1:
    image: {chronosDockerRegistry}/chronos1:{chronos1Tag}
    restart: unless-stopped
    ports:
      - {chronos1Port}:8080
    volumes:
      - ./data/chronos:/root/chronos
    networks:
      - {network}
    labels:
      - traefik.enable=true
      - traefik.http.routers.{projectID}-chronos1.entrypoints=web,web-secured
      - traefik.http.routers.{projectID}-chronos1.rule=Host(`chronos1.{projectID}.{domain}`)
      - traefik.http.middlewares.chronos1pathstrip.stripprefix.prefixes=/chronos
      - traefik.http.middlewares.chronos1pathadd.addprefix.prefix=/chronos
      - traefik.http.routers.{projectID}-chronos1.middlewares=chronos1pathstrip@docker,chronos1pathadd@docker
      - traefik.http.routers.{projectID}-chronos1.service={projectID}-chronos1
      - traefik.http.services.{projectID}-chronos1.loadbalancer.server.port=8080
      - traefik.docker.network={network}
      - traefik.http.routers.{projectID}-chronos1.tls=true
      - traefik.http.routers.{projectID}-chronos1.tls.certresolver=default

  illustry_mongo:
    image: mongo:5
    restart: unless-stopped
    volumes:
      - ./data/illustry_mongo:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootPass
      MONGO_INITDB_DATABASE: illustry-database
    networks:
      - {projectID}-illustry-network

  illustry:
    image: dxworks/illustry:{illustryTag}
    restart: unless-stopped
    ports:
      - {illustryPort}:7000
    environment:
      MONGODB_CONNECTION_URI: mongodb://illustry_mongo:27017
      MONGODB_USER: root
      MONGODB_PASSWORD: rootPass
      MONGODB_DBNAME: illustry-database
    depends_on:
      - illustry_mongo
    networks:
      - {projectID}-illustry-network
      - {network}
    labels:
      - traefik.enable=true
      - traefik.http.routers.{projectID}-illustry.entrypoints=web,web-secured
      - traefik.http.routers.{projectID}-illustry.rule=Host(`illustry.{projectID}.{domain}`)
      - traefik.http.routers.{projectID}-illustry.service={projectID}-illustry
      - traefik.http.services.{projectID}-illustry.loadbalancer.server.port=7000
      - traefik.docker.network={network}
      - traefik.http.routers.{projectID}-illustry.tls=true
      - traefik.http.routers.{projectID}-illustry.tls.certresolver=default

networks:
  {network}:
    external: true
  {projectID}-illustry-network:
    driver: bridge
